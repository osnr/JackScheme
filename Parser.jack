class Parser {
    static List tokens; // List<String>

    function void tokenize(String str) {
        var int length;
        var int i;
        var int tokenLength;
        var char c;
        var String token;

        do Output.printString("tokenizing: ");
        do Output.printString(str);
        do Output.println();

        let i = 0;
        let length = str.length();
        while (i < length) {
            let c = str.charAt(i);

            if (~(c = 32)) { // ' '
                if (c = 40) { // '('
                    let tokens = List.new("(", tokens);
                } else {
                    if (c = 41) { // ')'
                        let tokens = List.new(")", tokens);
                    } else {
                        let tokenLength = 0;
                        while ((i < length) & ~(c = 32) & ~(c = 40) & ~(c = 41)) {
                            let tokenLength = tokenLength + 1;
                            let i = i + 1;
                        }

                        let i = i - tokenLength;
                        let token = String.new(tokenLength);
                        let c = str.charAt(i);
                        while ((i < length) & ~(c = 32) & ~(c = 40) & ~(c = 41)) {
                            let token = token.appendChar(c);

                            let i = i + 1;
                            let c = str.charAt(i);
                        }
                        let i = i - 1; // correct for overshoot that trigged end of loop

                        let tokens = List.new(token, tokens);
                    }
                }
            }

            let i = i + 1;
        }

        let tokens = tokens.reverse();

        let i = 0;
        do Output.printString("tokens parsed [");
        do Output.printInt(tokens.size());
        do Output.printString("]:");
        do Output.println();
        while (i < tokens.size()) {
            do Output.printString(tokens.get(i));
            do Output.println();
            let i = i + 1;
        }
        return;
    }

    function boolean isDigit(char c) {
        // '0' to '9'
        return c = 48 | (c > 48 & c < 57) | c = 57;
    }

    function Cell atom(String token) {
        if (Parser.isDigit(token.charAt(0))) {
            return NumberCell.new(token.intValue());

        } else {
            if (token.charAt(0) = 45) { // '-'
                if (Parser.isDigit(token.charAt(1))) {
                    return NumberCell.new(token.intValue());
                }
            }
        }
        
        return SymbolCell.new(token);
    }

    function Cell readFromTokens() {
        var String token;
        var List list;

        let token = tokens.head();
        let tokens = tokens.tail(); // pop ( or atom

        if (StringList.equals(token, "(")) {
            let list = null;
            while (~(StringList.equals(tokens.head(), ")"))) {
                let list = List.new(Parser.readFromTokens(), list);
            }
            let tokens = tokens.tail(); // pop )
            return ListCell.new(list.reverse());

        } else {
            do Output.printString("atomic token ");
            do Output.printString(token);
            do Output.println();
            return Parser.atom(token);
        }
    }

    function Cell read(String s) {
        var Cell ast;
        do Parser.tokenize(s);

        let ast = Parser.readFromTokens();
        do Output.printString("ast: ");
        do Output.printString(Parser.toString(ast));
        do Output.println();

        return ast;
    }

    function String toString(Cell exp) {
        if (exp.type() = CellConsts.LIST()) {
            return Parser.listToString(exp);
        }
        if (exp.type() = CellConsts.NUMBER()) {
            return NumberCell.unwrap(exp);
        }
        if (exp.type() = CellConsts.SYMBOL()) {
            return SymbolCell.unwrap(exp);
        }
        if (exp.type() = CellConsts.LAMBDA()) {
            return "<Lambda>";
        }
        if (exp.type() = CellConsts.PROC()) {
            return "<Proc>";
        }
        do Output.printString("unknown value toString for type ");
        do Output.printInt(exp.type());
        do Output.println();
        // do Sys.halt();
        return "?";
    }

    function String listToString(ListCell exp) {
        var List list;
        var String s;
        let s = "(";
        let list = exp.list();
        while (~(list = null)) {
            let s = StringList.appendWithExtra(s, Parser.toString(list.head()), 1);
            let s = s.appendChar(32); // ' '
            let list = list.tail();
        }
        if (s.charAt(s.length() - 1) = 32) { // ' '
            do s.eraseLastChar();
        }
        let s = StringList.append(s, ")");

        return s;
    }
}
